{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","submit","e","preventDefault","fetch","method","body","JSON","stringify","state","headers","then","res","json","data","errors","alert","handleChange","setState","target","name","value","campaignUuid","firstName","lastName","email","password","className","onSubmit","this","type","placeholder","onChange","required","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8PAmGeA,G,wDA/Fb,aAAe,IAAD,8BACZ,gBAcFC,OAAS,SAACC,GAERA,EAAEC,iBACFC,MAAM,oCAAqC,CACzCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,EAAKC,OAC1BC,QAAS,CAAE,eAAgB,sBAE1BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACAA,EAAKC,OAIPC,MAAM,qDAHNA,MAAM,8CA1BA,EAkCdC,aAAe,SAACf,GACd,EAAKgB,SAAS,CAACJ,KAAK,2BAAK,EAAKL,MAAMK,MAAjB,kBAAwBZ,EAAEiB,OAAOC,KAAOlB,EAAEiB,OAAOE,WAhCpE,EAAKZ,MACL,CACEa,aAAc,uCACdR,KAAM,CACFS,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,SAAU,KAVJ,E,qDAuCd,OACE,6BACE,yBAAKC,UAAU,eACX,0BAAMC,SAAUC,KAAK5B,QACrB,uCACA,6EACI,yBAAK0B,UAAU,cACjB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OAAM,2BAAOG,KAAK,OACjCH,UAAU,eACVP,KAAK,YACLW,YAAY,aACZC,SAAUH,KAAKZ,aACfI,MAAOQ,KAAKpB,MAAMK,KAAKS,UACvBU,SAAS,cAET,yBAAKN,UAAU,OAAM,2BAAOG,KAAK,OACjCH,UAAU,eACVP,KAAK,WACLW,YAAY,YACZC,SAAUH,KAAKZ,aACfI,MAAOQ,KAAKpB,MAAMK,KAAKU,SACvBS,SAAS,gBAIT,yBAAKN,UAAU,cACb,2BAAOG,KAAK,QACZH,UAAU,eACVP,KAAK,QACLW,YAAY,QACZC,SAAUH,KAAKZ,aACfI,MAAOQ,KAAKpB,MAAMK,KAAKW,MACvBQ,SAAS,cAGf,yBAAKN,UAAU,cACP,2BAAOG,KAAK,WACZH,UAAU,eACVP,KAAK,WACLW,YAAY,WACZC,SAAUH,KAAKZ,aACfI,MAAOQ,KAAKpB,MAAMK,KAAKY,SACvBO,SAAS,cAGjB,yBAAKN,UAAU,cACP,4BAAQG,KAAK,SAASH,UAAU,0BAAhC,mB,GAvFAO,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1bb51afb.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = \n    {\n      campaignUuid: \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\n      data: {\n          firstName: '',\n          lastName: '',\n          email: '',\n          password: ''\n      }\n    }\n  }\n\n  submit = (e) => {\n    \n    e.preventDefault();\n    fetch('https://api.raisely.com/v3/signup', {\n      method: 'POST',\n      body: JSON.stringify(this.state),\n      headers: { 'Content-Type': 'application/json' },\n    })\n      .then(res => res.json())\n      .then(data => {\n        if(!data.errors) {\n          alert(\"Congratulations! User has been created\")\n        }\n        else {\n          alert(\"Email already registered. Please try another one!\")\n        }\n      })\n  }\n\n  handleChange = (e) => {\n    this.setState({data: {...this.state.data, [e.target.name]: e.target.value}})\n  }\n\n  render() {\n  return (\n    <div>\n      <div className=\"signup-form\">\n          <form onSubmit={this.submit}>\n          <h2>Sign Up</h2>\n          <p>Please fill in this form to create an account!</p>\n              <div className=\"form-group\">\n            <div className=\"row\">\n              <div className=\"col\"><input type=\"text\" \n              className=\"form-control\" \n              name=\"firstName\" \n              placeholder=\"First Name\" \n              onChange={this.handleChange}\n              value={this.state.data.firstName} \n              required=\"required\"\n               /></div>\n              <div className=\"col\"><input type=\"text\" \n              className=\"form-control\" \n              name=\"lastName\" \n              placeholder=\"Last Name\" \n              onChange={this.handleChange}\n              value={this.state.data.lastName} \n              required=\"required\"\n               /></div>\n            </div>        \t\n              </div>\n              <div className=\"form-group\">\n                <input type=\"email\" \n                className=\"form-control\" \n                name=\"email\" \n                placeholder=\"Email\" \n                onChange={this.handleChange}\n                value={this.state.data.email} \n                required=\"required\" \n                />\n              </div>\n          <div className=\"form-group\">\n                  <input type=\"password\" \n                  className=\"form-control\" \n                  name=\"password\" \n                  placeholder=\"Password\" \n                  onChange={this.handleChange}\n                  value={this.state.data.password} \n                  required=\"required\" \n                  />\n              </div>       \n          <div className=\"form-group\">\n                  <button type=\"submit\" className=\"btn btn-primary btn-lg\">Sign Up</button>\n              </div>\n          </form>\n      </div>\n      </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}